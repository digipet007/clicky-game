{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Footer/index.js","App.js","index.js"],"names":["Card","props","className","onClick","reorderCats","id","alt","name","src","image","Wrapper","children","Footer","App","state","cats","score","highScore","message","clickedIds","includes","setState","push","length","i","j","Math","floor","random","this","map","cat","key","Component","ReactDOM","render","document","getElementById"],"mappings":"m4QAWeA,MARf,SAAcC,GACZ,OACE,yBAAKC,UAAU,eAAeC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,MACnE,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,U,MCCxBC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCS1BC,MAVf,SAAgBX,GACd,OACE,4BAAQC,UAAU,yCAChB,yBAAKA,UAAU,gCACb,2BAAID,EAAMU,a,OCsFHE,E,2MArFbC,MAAQ,CACNC,OACAC,MAAO,EACPC,UAAW,EACXC,QAAS,mCACTC,WAAY,I,EAIdf,YAAc,SAAAC,GACZ,IAAIc,EAAa,EAAKL,MAAMK,WACxBF,EAAY,EAAKH,MAAMG,UACvBD,EAAQ,EAAKF,MAAME,MAGvB,GAAIG,EAAWC,SAASf,GAUtB,OATA,EAAKgB,SAAS,CACZF,WAAY,GACZH,MAAO,EACPE,QAAS,8BAGPF,EAAQC,GACV,EAAKI,SAAS,CAAEJ,UAAWD,KAO7B,GAFAG,EAAWG,KAAKjB,GAEZc,EAAWI,SAAWR,EAAKQ,OAA/B,CAQA,EAAKF,SAAS,CACZN,OACAI,aACAH,MAAOG,EAAWI,OAClBL,QAAS,qCAKb,IAAK,IAAIM,EAAIT,EAAKQ,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACxC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADA,EAEnB,CAACT,EAAKU,GAAIV,EAAKS,IAAnCT,EAAKS,GAFkC,KAE9BT,EAAKU,GAFyB,WAhBtC,EAAKJ,SAAS,CACZL,MAAO,EACPE,QAAS,sBACTC,WAAY,M,wEAoBV,IAAD,OACP,OACE,6BACE,yBAAKjB,UAAU,iDACb,wBAAIA,UAAU,yBAAd,eACA,0BAAMA,UAAU,kCACb2B,KAAKf,MAAMI,SAEd,0BAAMhB,UAAU,8BAAhB,UACU2B,KAAKf,MAAME,MADrB,iBAC0Ca,KAAKf,MAAMG,YAIvD,kBAAC,EAAD,KACGY,KAAKf,MAAMC,KAAKe,KAAI,SAAAC,GAAG,OACtB,kBAAC,EAAD,CACE3B,YAAa,EAAKA,YAClBC,GAAI0B,EAAI1B,GACR2B,IAAKD,EAAI1B,GACTI,MAAOsB,EAAItB,YAIjB,kBAAC,EAAD,KACE,oE,GAhFQwB,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b74e5a63.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card rounded\" onClick={() => props.reorderCats(props.id)}>\n      <img alt={props.name} src={props.image} />\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <footer className=\"py-4 text-white-50 text-center footer\">\r\n      <div className=\"footer-container text-center\">\r\n        <p>{props.children}</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\";\nimport cats from \"./cats.json\";\n\nclass App extends Component {\n  // Setting this.state.cats to the cats json array, and initial game stats\n  state = {\n    cats,\n    score: 0,\n    highScore: 0,\n    message: \"To win, click only unique images\",\n    clickedIds: []\n  };\n\n  //on click function to reorder cats, calculate and display scores, and show messages\n  reorderCats = id => {\n    let clickedIds = this.state.clickedIds;\n    let highScore = this.state.highScore;\n    let score = this.state.score;\n\n    //if the player clicks the same cat image twice\n    if (clickedIds.includes(id)) {\n      this.setState({\n        clickedIds: [],\n        score: 0,\n        message: \"Game Over! You lost.\"\n      });\n      //if the player lost, adjust their highscore\n      if (score > highScore) {\n        this.setState({ highScore: score });\n      }\n      return;\n      // if the player clicks on a unique image, increase their score (set to the length of clickedIds)\n    } else {\n      clickedIds.push(id);\n\n      if (clickedIds.length === cats.length) {\n        this.setState({\n          score: 3,\n          message: \"You won! Great job!\",\n          clickedIds: []\n        });\n        return;\n      }\n      this.setState({\n        cats,\n        clickedIds,\n        score: clickedIds.length,\n        message: \"To win, click only unique images\"\n      });\n    }\n\n    //shuffle array order via the Fisher-Yates Shuffle https://bost.ocks.org/mike/shuffle/\n    for (let i = cats.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [cats[i], cats[j]] = [cats[j], cats[i]];\n    }\n  };\n\n  // Map over this.state.cats and render a Card component for each cat object\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <h1 className=\"nav-item navbar-brand\">Memory Game</h1>\n          <span className=\"navbar-text directions ml-auto\">\n            {this.state.message}\n          </span>\n          <span className=\"navbar-text scores ml-auto\">\n            Score: {this.state.score} | Top Score: {this.state.highScore}\n          </span>\n        </nav>\n\n        <Wrapper>\n          {this.state.cats.map(cat => (\n            <Card\n              reorderCats={this.reorderCats}\n              id={cat.id}\n              key={cat.id}\n              image={cat.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer>\n          <small>Copyright &copy; Sarah Arnold</small>\n        </Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}